Model.i
Model
lapply(Matrice, class)
Model
Matrice
Formula.Covariates
y
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Model.i
Model
as.matrix(Matrice) %*% (coef(Model)[3:length(coef(Model))])
Estimated
coef(Model)[3:length(coef(Model))]
M.Cov
as.vector((y - (coef(Model)[1] + M.Cov ))/coef(Model)[2])
y
coef(Model)[1]
M.Cov
length(y)
y(500)
y[500]
coef(Model)[2]
Estimated[500]
y[500]
coef(Model)
M.Cov[500]
Model.i
Formula.Covariates
DateIN
DateEND
Model
Estimated[500]
Model
y
runApp('S:/Box Sync/AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
DateIN
View(General.cal())
CalSet()$nameGasMod
General.cal()[General.cal()$date > DateIN & General.cal()$date <= DateEND,c(CalSet()$nameGasMod)]
View(General.cal()[General.cal()$date > DateIN & General.cal()$date <= DateEND,])
Model.i
Model
Model.i
min(Estimated)
min(Estimated, na.rm = T)
length(Estimated)
length(Estimated[100000:120000])
(Estimated[100000:120000])
(Estimated[119000:120000])
(Estimated[129000:130000])
View(General.cal()[General.cal()$date > DateIN & General.cal()$date <= DateEND,]%)
View(General.cal()[General.cal()$date > DateIN & General.cal()$date <= DateEND,])
Model.i
Model
Estimated[99842:99999]
M.Cov[99842:99999]
Matrice[99842,]
y[99842:99850]
Model$fitted.values[1:20]
Model.i
runApp('S:/Box Sync/AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Model.i
Power
NewMatrice
Estimated
Model
Model.i
Model
Matrice
Estimated
Estimated[98800:98900]
Model
Estimated[98800:98900]
Estimated[99800:99900]
Estimated[99842:109921]
View(Estimated[99842:109921])
max(Estimated[99842:109921])
max(Estimated[100000:105000])
max(Estimated[100000:109000])
max(Estimated[100000:108000])
max(Estimated[100000:107000])
max(Estimated[100000:106000])
max(Estimated[100000:106500])
max(Estimated[100000:106800])
max(Estimated[100000:106900])
max(Estimated[106800:106900])
View(Estimated[106800:106900])
Model
max(Estimated[106800:106900])
max(Estimated[98852:109921])
k
Model.i
Model
Model.i
Matrice
Estimated[98900:100000]
loadRDS(choose.file)
load(choose.file())
load(file.choose())
Model.i <- load(file.choose())
Model.i <- readRDS(file.choose())
Model.i
Matrice <- Model.i$model[,3:4]
View(Matrice)
M.Cov <- as.matrix(Matrice) %*% coef(Model.i)[3:4]
coef(Model.i)[3:4]
M.Cov
NO <- (Model.i$model$y - (coef(Model.i)[1] + M.Cov))/coef(Model.i)[2]
plot(Model.i$model$x, NO)
grid(NULL,NULL)
Model.i
library(shiny); runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Model
names(Matrice)
Cov.Index
names(coef(Model))[3:length(coef(Model))][Cov.Index]
Power
Matrice
length(Matrice[,j])
matrix(Matrice[,j]^Power, nrow = length(Matrice[,j]), ncol = length(Power), byrow = TRUE)
View(NewMatrice)
class(Matrice) != "matrix"
coef(Model)[3:length(coef(Model))]
Matrice
Matrice %*% coef(Model)[3:length(coef(Model))]
y
coef(Model)[1]
coef(Model)[2])
coef(Model)[2]
(y - (coef(Model)[1] + M.Cov ))/coef(Model)[2]
Estimated[98800:98900]
Model.i
Matrice.model <- Model.i$model[,3:4]
M.Cov.Model <- as.matrix(Matrice.model) %*% coef(Model.i)[3:4]
M.Cov.Model
View(M.Cov.Model)
M.Cov[98842:98900]
Matrice[1,1]
Matrice.model[1,1]
Matrice[98842,1]
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Matrice[98842]
Matrice[98842,]
Matrice[98842:98900,]
Mod_type
Model.i
Matrice[98842,]
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Model
View(Matrice)
length(y)
nrow(Matrice)
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
nrow(Matrice)
Matrice
nrow(General.df[!is.na(General.df[, nameGasVolt]), nameGasVolt])
View(Matrice)
length(Matrice[,j])
NA^2
NA^1
length(y)
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
General.df[!is.na(General.df[, nameGasVolt]), nameGasVolt]
length(General.df[!is.na(General.df[, nameGasVolt]), nameGasVolt])
length(General.df[(General.df[, nameGasVolt]), nameGasVolt])
General.df[,nameGasVolt]
CovMod
General.df[General.df[,nameGasVolt], CovMod]
unlist(strsplit(unlist(strsplit(sub(pattern = ".rds",
replacement = "",
x = input[[paste0("Cal",k)]]
)
nameGasVolt
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
runApp('app_noSlider.R')
length(y)
Model
is.not.NA.y
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Model
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
length(General.df[!is.na(General.df[, nameGasVolt]), nameGasVolt])
length(y)
nrow(Matrice)
Matrice[98842]
Matrice[98842,]
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
General.df[!is.na(General.df[, nameGasVolt]), nameGasVolt][98842,]
General.df[!is.na(General.df[, nameGasVolt]), nameGasVolt]
General.df[!is.na(General.df[, nameGasVolt]), c("date",nameGasVolt)][98842,]
General.df[!is.na(General.df[, nameGasVolt]), c("date",nameGasVolt)][97000,]
General.df[!is.na(General.df[, nameGasVolt]), c("date",nameGasVolt)][96700,]
General.df[!is.na(General.df[, nameGasVolt]), c("date",nameGasVolt)][96300,]
General.df[!is.na(General.df[, nameGasVolt]), c("date",nameGasVolt)][96330,]
General.df[!is.na(General.df[, nameGasVolt]), c("date",nameGasVolt)][96430,]
General.df[!is.na(General.df[, nameGasVolt]), c("date","Teperature",nameGasVolt)][96427,]
General.df[!is.na(General.df[, nameGasVolt]), c("date","Temperature",nameGasVolt)][96427,]
Matrice[96427]
Matrice[96427,]
data.frame(General.df[is.not.NA.y, CovMod],
row.names = TRUE
stringsAsFactors = FALSE)
data.frame(General.df[is.not.NA.y, CovMod],
row.names = TRUE,
stringsAsFactors = FALSE)
data.frame(General.df[is.not.NA.y, CovMod],
row.names = row.names( General.df[!is.na(General.df[, nameGasVolt],)),
stringsAsFactors = FALSE)
row.names(General.df[is.not.NA.y,])
Matrice <- data.frame(General.df[is.not.NA.y, CovMod],
row.names = row.names(General.df[is.not.NA.y,]),
stringsAsFactors = FALSE)
Matrice[98842,]
General.df[98842,c("date","Temperature")]
Matrice <- data.frame(General.df[is.not.NA.y, c("date",CovMod)],
row.names = row.names(General.df[is.not.NA.y,]),
stringsAsFactors = FALSE)
Matrice[98842,]
Matrice[,"Temperature"]-General.df[is.not.NA.y,c("date","Temperature")]
Matrice[,"Temperature"]-General.df[is.not.NA.y,"Temperature")]
Matrice[,"Temperature"]-General.df[is.not.NA.y,"Temperature"]
All.0 <- Matrice[,"Temperature"]-General.df[is.not.NA.y,"Temperature"]
View(All.0)
max(All.0)
max(All.0, na.rm = T)
which(is.na(All.0))
row.names(Matrice) - raw.names(General.df[is.not.NA.y, nameGasVolt])
row.names(Matrice) - row.names(General.df[is.not.NA.y, nameGasVolt])
row.names(Matrice) == row.names(General.df[is.not.NA.y, nameGasVolt])
row.names(Matrice)
row.names(General.df[is.not.NA.y, nameGasVolt])
row.names(General.df[is.not.NA.y,])
identical( row.names(Mtrice), row.names(General.df[is.not.NA.y,]))
identical( row.names(Matrice), row.names(General.df[is.not.NA.y,]))
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
General.df[is.not.NA.y, "Temperature"][96427]
Matrice[96427]
Matrice[96427,]
Power
View(NewMatrice)
Matrice[94627,]
j
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Matrice[96427,]
Matrice[,j]^Power
nrow(Matrice)
str(Matrice)
data.frame(Matrice[,j]^Power, nrow = length(Matrice[,j]), ncol = length(Power), byrow = TRUE)
NewMatrice
class(Matrice[,1])
class(Matrice[,2])
data.frame(Matrice, stringsAsFactors = F)
Matrice[,1]
Matrice[,2]
Matrice
NewMatrice  <- matrix(Matrice[,j]^Power, nrow = length(Matrice[,j]), ncol = length(Power), byrow = TRUE)
NewMatrice[,1]
NewMatrice[,2]
Matrice
Matrice[,2]
Matrice[96427,]
is.na(Matrice[,1])
which(is.na(Matrice[,1]))
Matrice[96427,]
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Matrice[9642,]
Matrice[96427,]
Model
as.matrix(Matrice[,j]^Power, nrow = length(Matrice[,j]), ncol = length(Power), byrow = TRUE, na.r)
Matrice[96427,]
cbind(Matrice[,j], Matrice[,j]^Pwer[2])
cbind(Matrice[,j], Matrice[,j]^Power[2])
cbind(Matrice[,j], Matrice[,j]^Power[2])[96427,]
as.matrix(cbind(Matrice[,j], Matrice[,j]^Power[2]))[96427,]
k = 1
Matrice[,j]^k
NewMatrice  <- Matrice[,j]^k
k = 2
cbind(NewMatrice, Matrice[,j]^k)
NewMatrice <- cbind(NewMatrice, Matrice[,j]^k)
Matrice
j = 1
Power
k = 1
exists("NewMatrice")
NewMatrice  <- Matrice[,j]^k
class(Matrice)
k = 2
exists("NewMatrice")
NewMatrice <- cbind(NewMatrice, Matrice[,j]^k)
NewMatrice
class(Matrice)
# update Matrice if needed
Matrice <- NewMatrice
rm(NewMatrice)
class(Matrice) != "matrix"
class(Matrice)
Matrice
Matrice[,2]
Matrice[96427,]
class(Matrice) != "matrix"
M.Cov <- Matrice %*% coef(Model)[3:length(coef(Model))]
Estimated <- as.vector((y - (coef(Model)[1] + M.Cov ))/coef(Model)[2])
Estimated[96427]
Estimated[96427:96900]
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Matrice[96427,]
Power
k
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Power
k
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
as.data.frame(Matrice[,j]^k)
NewMatrice[,ncol("NewMatrice")+1] <- Matrice[,j]^k
View(NewMatrice)
k
str(NewMatrice)
k
exists("NewMatrice")
ncol("NewMatrice")+1
ncol("NewMatrice")
cbind(NewMatrice, Matrice[,j]^k)
NewMatrice <- cbind(NewMatrice, Matrice[,j]^k)
class(NewMatrice)
View(Matrice)
class(Matrice)
class(Matrice) != "matrix"
class(Matrice)
class(Matrice) != "matrix"
Matrice <- as.matrix(Matrice)
class(Matrice)
M.Cov
Estimated[96427:96500]
Estimated[96427:96900]
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
library(shiny); runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
CalSet()$WDoutput
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
str(Out.Warm.TRh.Neg.Inv())
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
str(Out.Warm.TRh.Neg.Inv())
input$Apply.Cal1
input$Apply.Cal2
input$Apply.Cal1
input$Apply.Cal2
input$Apply.Cal3
input$Apply.Cal4
!any(grepl(pattern = paste0(list.name.sensors()[1],"_modelled"), x = colnames(General.conv()))
)
colnames(General.conv()))
colnames(General.conv())
paste0(list.name.sensors()[1],"_modelled")
names(General.cal())
names(Out.Outliers())
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
names(General.conv())
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
input$Force.Conv1
any(input$Force.Conv1, input$Force.Conv2, input$Force.Conv3, input$Force.Conv4)
Force.Conv
names(Out.Outliers())
list.name.sensors()
colnames(General.conv())
list.gas.sensors()
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Force.Conv
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
any(input$Apply.S.Out1,input$Apply.S.Out2,input$Apply.S.Out3,input$Apply.S.Out4) ||
!any(grepl(pattern = paste0("Out.",list.gas.sensors()[1],".1"), x = colnames(Out.Warm.TRh.Neg.Inv()))) ||
any(input$Apply.R.Out1,input$Apply.R.Out2,input$Apply.R.Out3,input$Apply.R.Out4,input$Apply.R.Out5,input$Apply.R.Out6) ||
!any(grepl(pattern = paste0("Out.",list.gas.reference2use()[1],".1"), x = colnames(Out.Warm.TRh.Neg.Inv()))
)
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
input$Out.Sens.Date1[1]
names(General.cal())
General.cal()
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
names(General.cal())
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
c
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Force.Conv
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
is.not.NA.y
is.NA.y
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
library(shiny); runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
k
CovMod
k
CovMod
intersect(is.not.NA.y, is.NA.y)
View(General.df[is.NA.y,"date"])
View(General.df[is.NA.y,c("date",nameGasMod)])
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
library(shiny); runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
library(shiny); runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Start != input[[paste0("DateCal",CalSet()$k)]][1] | End != input[[paste0("DateCal",CalSet()$k)]][2]
input[[paste0("DateCal",CalSet()$k)]][1]
input[[paste0("DateCal",CalSet()$k)]][2]
Start
End
CalSet()$k)]]
CalSet()$k
input[[paste0("Cal",CalSet()$k)]]
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
library(shiny); runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Splitted.Cal
CalSet()
unlist(strsplit(x = input[[paste0("Cal",CalSet()$k)]], split = "__"))
cat("-----------------------------------------------------------------------------------\n")
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Splitted.Cal
Start
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
paste0(Config()[[1]]$AirsensEur.name,"__",list.name.sensors()[k],"__",input[[paste0("Cal",k)]])
Cal
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
Cal
list(list.files(path       = i,
pattern    = Cal,
full.names = TRUE))
do.call(file.remove, list(list.files(path       = i,
pattern    = Cal,
full.names = TRUE))
)
substr(list.files(path = file.path(DisqueFieldtestDir(),"Models"),
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[i],"*",".rds"))),
start = nchar(paste0(Config()[[1]]$AirsensEur.name,"__",list.name.sensors()[i],"__")) + 1,
stop  = nchar(list.files(path = file.path(DisqueFieldtestDir(),"Models"),
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[i],"*",".rds"))))
)
choices[1]
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
choices
list.files(path = file.path(DisqueFieldtestDir(),"Models"),
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[i],"*",".rds")))
CalSet()
file.path(DisqueFieldtestDir(),"Models")
glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[i],"*",".rds"))
list.name.sensors()[k]
list.files(path = file.path(DisqueFieldtestDir(),"Models"),
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[k],"*",".rds")))
nchar(list.files(path = file.path(DisqueFieldtestDir(),"Models"),
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[k],"*",".rds")))
)
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
substr(list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[i],"*",".rds"))),
start = nchar(paste0(Config()[[1]]$AirsensEur.name,"__",list.name.sensors()[i],"__")) + 1,
stop  = nchar(list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[i],"*",".rds"))))
)
CalSet()$WDoutputMod
glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[i],"*",".rds")))
glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[i],"*",".rds"))
substr(list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[CalSet()$k],"*",".rds"))),
start = nchar(paste0(Config()[[1]]$AirsensEur.name,"__",list.name.sensors()[i],"__")) + 1,
stop  = nchar(list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[CalSet()$k],"*",".rds"))))
)
list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[CalSet()$k],"*",".rds"))
)
ubstr(list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[CalSet()$k],"*",".rds"))),
start = nchar(paste0(Config()[[1]]$AirsensEur.name,"__",list.name.sensors()[CalSet()$k],"__")) + 1,
stop  = nchar(list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[CalSet()$k],"*",".rds"))))
)
substr(list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[CalSet()$k],"*",".rds"))),
start = nchar(paste0(Config()[[1]]$AirsensEur.name,"__",list.name.sensors()[CalSet()$k],"__")) + 1,
stop  = nchar(list.files(path    = CalSet()$WDoutputMod,
pattern = glob2rx(paste0(Config()[[1]]$AirsensEur.name,"*",list.name.sensors()[CalSet()$k],"*",".rds"))))
)
paste0(paste(CalSet()$Sens.raw.unit, CalSet()$mod.eta.model.type,
format(DateIN,"%Y%m%d"),format(DateEND,"%Y%m%d"),namesCovariates,sep="__"),".rds")
paste(CalSet()$CovMod, collapse = "&")
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider_UiLoop.R')
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
name.sensor
Covariates
nameModel
Newchoices
NewModel
Newchoices
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
runApp('app_noSlider.R')
namesCovariates
NewModel
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
input[[paste0("DelModel",1)]]
input[[paste0("DelModel",2)]]
input[[paste0("DelModel",3)]]
input[[paste0("DelModel",4)]]
input[[paste0("DelModel",3)]]
input[[paste0("DelModel",2)]]
input[[paste0("DelModel",1)]]
k
input$Calib_Sensors
need(input$Calib_sensors)
is.null(input$Calib_Sensors)
list.name.sensors()
runApp('AirSensEUR/Fieldtests/Shiny/app_noSlider.R')
